
    ADD X0, X0, :lo12:my_array   // Add the lower 12 bits of my_array's address to X0

    // Load the initial value (4) into X2 (representing j)
    ADRP X1, initial_value       // Load the page address of initial_value into X1
    ADD X1, X1, :lo12:initial_value // Add the lower 12 bits of initial_value's address to X1
    LDUR X2, [X1, 0]            // Load the value at the address in X1 (4) into X2 (j)

    ORR X3, XZR, XZR                  // Initialize loop counter i to 0 (X3 = i)
    ORR X4, X0, XZR             // Initialize the address pointer X4 to my_array[0] (X4 = X0)

loop:
    CMP X3, #10                 // Compare i with 10
    B.EQ exit                   // If i == 10, exit the loop

    // Store the current value of j (in X2) into my_array[i]
    STUR X2, [X4, 0]            // Store the value of j (X2) into memory at address X4 (my_array[i])

    ADD X2, X2, #1              // Increment j (X2 = j + 1)
    ADD X3, X3, #1              // Increment i (X3 = i + 1)

    LSL X4, X4, #3              // Shift left i by 3 (multiply by 8) to get byte offset (i * 8)
    ADD X4, X4, X0              // Add the base address of my_array to the offset to get the new address (my_array[i])

    B loop                      // Repeat the loop

exit:
    // Exit the function
    BR X30                      // Branch back to the return address (end of function)


